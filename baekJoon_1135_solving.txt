import java.io.*;
import java.util.*;

public class Main {
    static class TreeNode {
        int depth;
        int parent;
        PriorityQueue<TreeNode> children = new PriorityQueue<TreeNode>(
                new Comparator<TreeNode>() {
                    @Override
                    public int compare(TreeNode o1, TreeNode o2) {
                        return o2.depth-o1.depth;
                    }
                }
        );

        TreeNode(int depth , int parent){
            this.depth = depth;
            this.parent = parent;
        }
    }
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(System.out));

        int N = Integer.parseInt(br.readLine());
        StringTokenizer st = new StringTokenizer(br.readLine() , " ");

        ArrayList<TreeNode> treeList = new ArrayList<>();
        treeList.add( new TreeNode(
                0,
                Integer.parseInt(st.nextToken())
        ));
        for(int i = 1; i < N ; i++){
            int parent = Integer.parseInt(st.nextToken());
            TreeNode parentNode = treeList.get(parent);
            int curDepth = parentNode.depth + 1;
            TreeNode curTree = new TreeNode(
                    curDepth,
                    parent
            );
            treeList.add(curTree);
            parentNode.children.add(curTree); // 자식 == i
        }//트리 완성

        Queue<TreeNode> bfsQueue = new LinkedList<>();
        bfsQueue.add(treeList.get(0));
        int count = 0;
        while(!bfsQueue.isEmpty()){
            int size = bfsQueue.size();
            for(int i = 0 ; i < size ; i++){
                TreeNode curTree = bfsQueue.poll();
                if(curTree.children.isEmpty())
                    continue;
                else{
                    bfsQueue.add(curTree);
                    bfsQueue.add(curTree.children.poll());
                }
            }
            if(!bfsQueue.isEmpty())
                count++;
        }
        bw.write(count+"");
        bw.close();
    }
}