class Solution {
    public void swap(int[] nums ,int a, int b){
        int temp = nums[a];
        nums[a] = nums[b];
        nums[b] = temp;
    }

    public void quickSort(int[] nums, int low, int high) {
        if (low < high) {
            int pivot = nums[high];
            int leftIndex = low;
            for (int i = low; i <= high ;i++) {
                if (nums[i] < pivot) {
                    swap(nums, i, leftIndex++);
                }
            }
            swap(nums, leftIndex, high);
            quickSort(nums, low, leftIndex - 1);
            quickSort(nums, leftIndex + 1, high);
        }
    }

    public void nextPermutation(int[] nums) {
        if (nums.length < 2) {
            return;
        }
        boolean valid = false;
        int minIndex = 0;
        int min = Integer.MAX_VALUE;

        for (int i = nums.length - 2 ; i >= 0; i--) {
            if (nums[i] < nums[i + 1]) {
                for (int j = nums.length - 1; j > i ; j--) {
                    if (nums[j] > nums[i]) {
                        int temp = nums[j];
                        nums[j] = nums[i];
                        nums[i] = temp;
                        valid = true;
                        quickSort(nums, i + 1, nums.length - 1);
                        break;
                    }
                }
                if (valid) {
                    break;
                }
            }
        }

        if (!valid) {
            for (int i = 0 ; i < nums.length / 2; i++) {
                int temp = nums[i];
                nums[i] = nums[nums.length - 1 - i];
                nums[nums.length - 1 - i] = temp;
            }
        }
    }
}
