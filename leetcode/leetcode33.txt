class Solution {
    public int search(int[] nums, int target) {
        return searchUnorderedBinary(0, nums.length -1, nums, target);
    }

    public int searchOrderedBinary(int left, int right, int[] nums, int target) {
        while (left <= right) {
            int mid = (left + right) / 2;
            if (nums[mid]< target) {
                left = mid + 1;
            } else if (nums[mid] > target) {
                right = mid - 1;
            } else {
                return mid;
            }
        }
        return -1;
    }

    public int searchUnorderedBinary(int left, int right, int[] nums, int target) {
        if (left > right) {
            return -1;
        }
        if (nums[left] > nums[right]) {
            int mid = (left + right) / 2;
            if (nums[mid] == target) {
                return mid;
            } else {
                int leftSearch = searchUnorderedBinary(left, mid - 1, nums, target);
                int rightSearch = searchUnorderedBinary(mid + 1, right, nums, target);
                if (leftSearch != -1) {
                    return leftSearch;
                } else {
                    return rightSearch;
                }
            }
        } else {
            return searchOrderedBinary(left, right, nums, target);
        }
    }
}
