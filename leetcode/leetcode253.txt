class Solution {
    public int minMeetingRooms(int[][] intervals) {
        List<Integer> startList = new ArrayList<>();
        List<Integer> endList = new ArrayList<>();

        int max = 0;
        for (int i = 0 ; i < intervals.length; i++) {
            startList.add(intervals[i][0]);
            endList.add(intervals[i][1]);
        }
        startList = startList.stream().sorted().toList();
        endList = endList.stream().sorted().toList();

        int startIndex = 0;
        int endIndex = 0;
        int depth = 0;

        while (startIndex < startList.size() || endIndex < endList.size()) {
            if (startIndex < startList.size() && startList.get(startIndex) < endList.get(endIndex)) {
                depth++;
                if(depth > max) {
                    max = depth;
                }
                startIndex++;
            } else {
                depth--;
                endIndex++;
            }
        }
        return max;
    }
}
